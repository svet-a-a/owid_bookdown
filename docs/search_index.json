[["index.html", "La population, la production de nourriture et la consommation d’énergie à l’échelle mondiale Chapter 1 Description des données", " La population, la production de nourriture et la consommation d’énergie à l’échelle mondiale Simon et Svetlana 24 juin 2022 Chapter 1 Description des données 3 fichiers : Consommation d’énergie production de la nourriture Population "],["préparation-des-données.html", "Chapter 2 Préparation des données 2.1 Bases de données a l’echelle mondiale 2.2 Bases de données par pays et continent et par pays 2.3 Jointure des bases de données 2.4 Base de données avec de totaux par pays", " Chapter 2 Préparation des données 2.1 Bases de données a l’echelle mondiale energy_world&lt;-read_delim(&quot;owid-energy-data__OWID.csv&quot;) |&gt; select(1:3, ends_with(&quot;consumption&quot;)) |&gt; filter(year&gt;1964 &amp; year&lt; 2020) |&gt; filter(country==&quot;World&quot;)|&gt; select(3:5,7,8,10,11,12,15,16) |&gt; pivot_longer(cols = 2:10, names_to = &quot;energy_source&quot;, values_to = &quot;energy_source_consumption&quot;) |&gt; replace_na(list(energy_source_consumption = 0)) |&gt; mutate(energy_type = if_else(condition = str_detect(energy_source, &quot;coal&quot;)| str_detect(energy_source, &quot;gas&quot;)| str_detect(energy_source, &quot;oil&quot;), true = &quot;fossil_fuel_consumption&quot;, false = &quot;low_carbon_consumption&quot;), .after = energy_source) ## Rows: 17470 Columns: 124 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (2): iso_code, country ## dbl (122): year, coal_prod_change_pct, coal_prod_change_twh, gas_prod_change... ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. write_delim(energy_world, &quot;energy_world.csv&quot;, delim = &quot;,&quot;) food_world&lt;-read_delim(&quot;Production_Crops_Livestock_E_All_Data.csv&quot;) |&gt; select(!ends_with(&quot;F&quot;)) |&gt; rename_with(~ str_remove(., &quot;Y&quot;), 8:67) |&gt; # names(food) &lt;- sub(&quot;Y&quot;, &quot;&quot;, names(food)) filter(str_detect(Item, &quot;Total&quot;)|str_detect(Item, &quot;Primary&quot;)) |&gt; #select(Element) |&gt; distinct() filter(Element==&quot;Production&quot;) |&gt; pivot_longer(cols = 8:67, names_to = &quot;year&quot;, values_to = &quot;production&quot;) |&gt; filter(Area == &quot;World&quot;) |&gt; mutate(year=as.numeric(year)) |&gt; mutate(production = production/1000000) |&gt; select(4, 7:9) ## Rows: 77523 Columns: 127 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (64): Area, Item, Element, Unit, Y1961F, Y1962F, Y1963F, Y1964F, Y1965F,... ## dbl (63): Area Code, Item Code, Element Code, Y1961, Y1962, Y1963, Y1964, Y1... ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. write_delim(food_world, &quot;food_world.csv&quot;, delim = &quot;,&quot;) population_world&lt;-read_excel(&quot;WPP2019_POP_F01_1_TOTAL_POPULATION_BOTH_SEXES_UN.xlsx&quot;, skip=16, na=&quot;...&quot;) |&gt; rename(region = 3) |&gt; filter(region==&quot;WORLD&quot;) |&gt; pivot_longer(cols = 8:78, names_to = &quot;year&quot;, values_to = &quot;population_total&quot;) |&gt; mutate(year = as.numeric(year)) |&gt; mutate(population_total = as.numeric(population_total)/1000000) |&gt; select(8,9) write_delim(population_world, &quot;population_world.csv&quot;, delim = &quot;,&quot;) 2.2 Bases de données par pays et continent et par pays energy_continent&lt;-read_delim(&quot;owid-energy-data__OWID.csv&quot;) |&gt; select(1:3, ends_with(&quot;consumption&quot;)) |&gt; filter(year&gt;1964 &amp; year&lt; 2020) |&gt; select(2:5,7,8,10,11,12,15,16) |&gt; pivot_longer(cols = 3:11, names_to = &quot;energy_source&quot;, values_to = &quot;energy_source_consumption&quot;) |&gt; replace_na(list(energy_source_consumption = 0)) |&gt; mutate(energy_type = if_else(condition = str_detect(energy_source, &quot;coal&quot;)| str_detect(energy_source, &quot;gas&quot;)| str_detect(energy_source, &quot;oil&quot;), true = &quot;fossil_fuel_consumption&quot;, false = &quot;low_carbon_consumption&quot;), .after = energy_source) |&gt; mutate(iso_code=countrycode(country, origin = &quot;country.name&quot;, destination = &quot;iso3c&quot;), .before = country) |&gt; drop_na(iso_code) |&gt; select(1,3:6) ## Rows: 17470 Columns: 124 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (2): iso_code, country ## dbl (122): year, coal_prod_change_pct, coal_prod_change_twh, gas_prod_change... ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. guess_encoding(&quot;Production_Crops_Livestock_E_All_Data.csv&quot;) food_continent&lt;-read_delim(&quot;Production_Crops_Livestock_E_All_Data.csv&quot;, locale = locale(encoding = &quot;ISO-8859-1&quot;)) |&gt; select(!ends_with(&quot;F&quot;)) |&gt; rename_with(~ str_remove(., &quot;Y&quot;), 8:67) |&gt; filter(str_detect(Item, &quot;Total&quot;)|str_detect(Item, &quot;Primary&quot;)) |&gt; filter(Element==&quot;Production&quot;) |&gt; pivot_longer(cols = 8:67, names_to = &quot;year&quot;, values_to = &quot;production&quot;) |&gt; mutate(year=as.numeric(year)) |&gt; mutate(production = production/1000000) |&gt; rename(country = 2) |&gt; filter(!str_detect(country, &quot;China,&quot;)) |&gt; #filter(continent==&quot;Asia&quot;) |&gt; #filter(str_detect(country,&quot;China&quot;)) |&gt; #group_by(country, Item) |&gt; #summarise(total = sum(production)) mutate(iso_code = countrycode(country, origin = &quot;country.name&quot;, destination = &quot;iso3c&quot;), .before = country) |&gt; drop_na(iso_code) |&gt; select(2,5,9,10) ## Rows: 77523 Columns: 127 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (64): Area, Item, Element, Unit, Y1961F, Y1962F, Y1963F, Y1964F, Y1965F,... ## dbl (63): Area Code, Item Code, Element Code, Y1961, Y1962, Y1963, Y1964, Y1... ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. population_continent&lt;-read_excel(&quot;WPP2019_POP_F01_1_TOTAL_POPULATION_BOTH_SEXES_UN.xlsx&quot;, skip=16, na=&quot;...&quot;) |&gt; rename(country = 3) |&gt; pivot_longer(cols = 8:78, names_to = &quot;year&quot;, values_to = &quot;population_total&quot;) |&gt; mutate(year = as.numeric(year)) |&gt; mutate(population_total = as.numeric(population_total)/1000000) |&gt; filter(!str_detect(country, &quot;China,&quot;)) |&gt; filter(!str_detect(country, &quot;excluding&quot;)) |&gt; mutate(iso_code = countrycode(country, origin = &quot;country.name&quot;, destination = &quot;iso3c&quot;), .before = country) |&gt; drop_na(iso_code) |&gt; select(3,9,10) 2.3 Jointure des bases de données df_country&lt;-full_join(energy_continent, food_continent, by = c(&quot;iso_code&quot; = &quot;iso_code&quot;, &quot;year&quot; = &quot;year&quot;)) |&gt; full_join(population_continent, by = c(&quot;iso_code&quot; = &quot;iso_code&quot;, &quot;year&quot; = &quot;year&quot;)) |&gt; mutate(country = countrycode(iso_code, origin = &quot;iso3c&quot;, destination = &quot;country.name&quot;), .before = year) |&gt; filter(!is.na(iso_code)) |&gt; mutate(continent=countrycode(iso_code, origin = &quot;iso3c&quot;, destination = &quot;continent&quot;), .after = country) write_delim(df_country, &quot;owid_country.csv&quot;, delim = &quot;,&quot;) 2.4 Base de données avec de totaux par pays energy_total&lt;-energy_continent |&gt; group_by(iso_code, year) |&gt; summarise(energy_total = sum(energy_source_consumption, na.rm=TRUE)) ## `summarise()` has grouped output by &#39;iso_code&#39;. You can override using the ## `.groups` argument. food_total&lt;-food_continent |&gt; group_by(iso_code, year) |&gt; summarise(production_total = sum(production, na.rm=TRUE)) ## `summarise()` has grouped output by &#39;iso_code&#39;. You can override using the ## `.groups` argument. df_total&lt;-full_join(energy_total, food_total, by = c(&quot;iso_code&quot; = &quot;iso_code&quot;, &quot;year&quot; = &quot;year&quot;)) |&gt; full_join(population_continent, by = c(&quot;iso_code&quot; = &quot;iso_code&quot;, &quot;year&quot; = &quot;year&quot;)) |&gt; mutate(country = countrycode(iso_code, origin = &quot;iso3c&quot;, destination = &quot;country.name&quot;), .before = year) write_delim(df_total, &quot;owid_total.csv&quot;, delim = &quot;,&quot;) "],["analyse-mondiale.html", "Chapter 3 Analyse mondiale 3.1 Column 1 3.2 Column 2 3.3 Column 3", " Chapter 3 Analyse mondiale 3.1 Column 1 3.1.1 Consommation d’energie par source et par source 3.1.2 Consommation d’energie parsource et par type 3.2 Column 2 3.2.1 Le graphique de la production mondiale de la nourriture 3.3 Column 3 3.3.1 Le graphique de la population mondiale "],["par-continent.html", "Chapter 4 Par continent 4.1 Column 1 {data-width=350, .tabset, .first-box} 4.2 Column 2 4.3 Column 3", " Chapter 4 Par continent 4.1 Column 1 {data-width=350, .tabset, .first-box} 4.1.1 Consommation d’energie par source et par type 4.1.2 Consommation d’energie par source 4.2 Column 2 4.2.1 Le graphique de la production de la nourriture 4.3 Column 3 4.3.1 Le graphique de la population "],["par-pays-france.html", "Chapter 5 Par pays (France) 5.1 Column 1 5.2 Column 2 5.3 Column 3", " Chapter 5 Par pays (France) 5.1 Column 1 5.1.1 Consommation d’energie par source et par type 5.1.2 Consommation d’energie par source 5.2 Column 2 5.2.1 Le graphique de la production de la nourriture 5.3 Column 3 5.3.1 Le graphique de la population "],["cartes.html", "Chapter 6 Cartes 6.1 Column 1 6.2 Column 2 6.3 Column 3", " Chapter 6 Cartes 6.1 Column 1 6.1.1 La carte de la consommation d’energie 6.2 Column 2 6.2.1 La carte de la production de la nourriture 6.3 Column 3 6.3.1 La carte de la population "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
